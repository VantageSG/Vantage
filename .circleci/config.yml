# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
ruby: &ruby
  environment:
    RAILS_ENV: test
    RACK_ENV: test
    TEST_DB_NAME: circle_test
    TEST_DB_PWD: root
mysql: &mysql
  image: mysql:8.0.18
  environment:
    MYSQL_ALLOW_EMPTY_PASSWORD: true
    MYSQL_ROOT_PASSWORD: root
    MYSQL_ROOT_USER: root
    MYSQL_ROOT_HOST: '%'
    MYSQL_HOST: 127.0.0.1
node: &node
  environment:
    NODE_ENV: test

version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.4-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout
      - run: sudo gem install bundler -v 2.0.2

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-bundle-{{ checksum "package.json" }}-selenium
      - run: yarn install
      - save_cache:
          key: v2-bundle-{{ checksum "package.json" }}-selenium
          paths:
            - node_modules

      - restore_cache:
          keys:
            - v2-bundle-{{ checksum "Gemfile.lock" }}-selenium
      # Optimisation: Go for j = no. cores + 1
      - run: bundle install --without=doc --path=vendor/bundle --jobs 2 --retry 3
      - save_cache:
          key: v2-bundle-{{ checksum "Gemfile.lock" }}-selenium
          paths:
            - vendor/bundle

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results